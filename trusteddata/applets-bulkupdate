{"id":"487eb856-a629-44c5-9d57-8bdb9b2f5838","content":"{\"html\":\"\u003cstyle\u003e\\n.bulk-update-searchbar {\\n    width: 50%;\\n}\\n.bulk-update-searchbar, .bulk-update-result-count {\\n    display: inline-block;\\n    margin: 5px;\\n}\\n\\n.bulkupdate-input-inputs \u003e .tagify {\\n    flex-grow: 1;\\n    margin: 0px 20px;\\n}\\n\\n.bulk-update-input-container {\\n    display: flex;\\n    flex-direction: column;\\n}\\n\\n.bulk-update-field {\\n    padding: 20px 0px;\\n    display: inline-block;\\n    border-bottom: solid 1px black;\\n}\\n\\n.bulk-update-input-container {\\n    margin: 0px;\\n    margin-bottom: 20px;\\n}\\n\\n.bulkupdate-input-inputs {\\n    display: flex;\\n    align-items: center;\\n}\\n\u003c/style\u003e\",\"js\":\"let A \u003d getUApi()\\n\\nA.makeH2({ innerHTML: \u0027Bulk update\u0027 })\\n\\nlet updatableFields \u003d {\\n    owner: {\\n        getInputElement: function () {\\n            return { ele: \u0027input\u0027, classList: \u0027owner-input\u0027, styles: { width: \u0027250px\u0027 }, evnts: { rendered: e \u003d\u003e tagify(e, \u0027user\u0027) } }\\n        },\\n        singular: () \u003d\u003e true,\\n        actions: () \u003d\u003e [\u0027SET\u0027],\\n        getData: (e) \u003d\u003e {\\n            let ee \u003d e.querySelector(\u0027input.bulkupdate-input-owner-input\u0027)\\n            if (!ee.value || ee.value \u003d\u003d \u0027\u0027) return\\n            let jVal \u003d JSON.parse(ee.value)\\n            if (jVal.length \u003e 1) {\\n                showError(\u0027choose a single value for owner\u0027)\\n                throw new Error(\u0027choose a single value\u0027)\\n            }\\n            return [{ type: \u0027SET\u0027, update: jVal[0].id }]\\n        },\\n        getKey: () \u003d\u003e \\\"OWNER\\\"\\n    },\\n    visibility: {\\n        getInputElement: function () {\\n            return { ele: \u0027input\u0027, classList: \u0027visibility-input\u0027, styles: { width: \u0027250px\u0027 }, evnts: { rendered: e \u003d\u003e tagify(e, \u0027user\u0027) } }\\n        },\\n        singular: () \u003d\u003e false,\\n        actions: () \u003d\u003e [\u0027ADD\u0027, \u0027DELETE\u0027],\\n        getData: (e) \u003d\u003e {\\n            let ret \u003d []\\n            let updates \u003d e.querySelectorAll(\u0027.bulkupdate-input-inputs\u0027)\\n            for (let i \u003d 0; i \u003c updates.length; i++) {\\n                let sel \u003d updates[i].querySelector(\u0027.bulkupdate-input-updtype\u0027).value\\n                let rawVal \u003d updates[i].querySelector(\u0027input.bulkupdate-input-visibility-input\u0027).value\\n                if (!rawVal) continue\\n                JSON.parse(rawVal).map(x \u003d\u003e x.id).forEach(id \u003d\u003e ret.push({ type: sel, update: id }))\\n            }\\n            return ret\\n        },\\n        getKey: () \u003d\u003e \u0027VISIBILITY\u0027\\n    },\\n    tags: {\\n        getInputElement: function () {\\n            return { ele: \u0027input\u0027, classList: \u0027tags-input\u0027, styles: { width: \u0027250px\u0027 }, evnts: { rendered: e \u003d\u003e tagify(e, \u0027tag\u0027) } }\\n        },\\n        singular: () \u003d\u003e false,\\n        actions: () \u003d\u003e [\u0027ADD\u0027, \u0027DELETE\u0027],\\n        getData: (e) \u003d\u003e {\\n            let ret \u003d []\\n            let updates \u003d e.querySelectorAll(\u0027.bulkupdate-input-inputs\u0027)\\n            for (let i \u003d 0; i \u003c updates.length; i++) {\\n                let sel \u003d updates[i].querySelector(\u0027.bulkupdate-input-updtype\u0027).value\\n                let rawVal \u003d updates[i].querySelector(\u0027input.bulkupdate-input-tags-input\u0027).value\\n                if (!rawVal) continue\\n                JSON.parse(rawVal).map(x \u003d\u003e x.name).forEach(id \u003d\u003e ret.push({ type: sel, update: id }))\\n            }\\n            return ret\\n        },\\n        getKey: () \u003d\u003e \u0027TAGS\u0027\\n    }\\n}\\ngetFormsForUpdatableFields \u003d () \u003d\u003e {\\n    let addUpdatableField \u003d (container, f) \u003d\u003e {\\n        render(\u0027bulkupdate-input\u0027, {\\n            ele: \u0027div\u0027,\\n            classList: \u0027inputs\u0027,\\n            children: [\\n                {\\n                    ele: \u0027select\u0027,\\n                    classList: \u0027updtype\u0027,\\n                    styles: { width: \u0027100px\u0027 },\\n                    children: updatableFields[f].actions().map(action \u003d\u003e ({ ele: \u0027option\u0027, text: action }))\\n                },\\n                updatableFields[f].getInputElement(),\\n                ...(updatableFields[f].singular() ? [] : [{ ele: \u0027button\u0027, text: \u0027-\u0027, evnts: { click: function () { this.parentNode.remove() } } }])\\n            ]\\n        }, () \u003d\u003e 0, container)\\n    }\\n    return Object.keys(updatableFields).map(f \u003d\u003e (\\n        {\\n            ele: \u0027div\u0027,\\n            classList: \u0027field\u0027,\\n            attribs: { xdata: f },\\n            styles: { display: \u0027flex\u0027, \u0027align-items\u0027: \u0027center\u0027 },\\n            children: [\\n                { ele: \u0027h3\u0027, text: f, styles: { display: \u0027inline\u0027, width: \u0027100px\u0027, \u0027text-align\u0027: \u0027right\u0027 } },\\n\\n                {\\n                    ele: \u0027button\u0027, styles: { clear: \u0027both\u0027, margin: \u00270px 20px\u0027 }, attribs: { disabled: updatableFields[f].singular() }, text: \u0027+\u0027, evnts: {\\n                        click: function () { addUpdatableField(this.nextSibling.children[0], f) }\\n                    }\\n                },\\n\\n                {\\n                    ele: \u0027div\u0027, styles: { display: \u0027block\u0027, padding: \u00270px 20px\u0027 }, children: [\\n                        { ele: \u0027div\u0027, evnts: { rendered: e \u003d\u003e addUpdatableField(e, f) } }\\n                    ]\\n                }\\n            ]\\n        }\\n    ))\\n}\\nrender(\u0027bulk-update\u0027, {\\n    ele: \u0027div\u0027,\\n    children: [\\n        {\\n            ele: \u0027div\u0027,\\n            children: [\\n                {\\n                    ele: \u0027input\u0027, label: \u0027search docs to update: \u0027, classList: \u0027searchbar\u0027, evnts: {\\n                        input: function () {\\n                            inodes.search(this.value, 0, 0)\\n                                .then(resp \u003d\u003e JSON.parse(resp.response))\\n                                .then(results \u003d\u003e this.nextSibling.innerHTML \u003d `found \u003ca href\u003d\u0027/?q\u003d${encodeURIComponent(this.value)}\u0027 target\u003d\u0027_blank\u0027\u003e${results.totalResults} object(s)\u003c/a\u003e`)\\n                        }\\n                    }\\n                },\\n                { ele: \u0027span\u0027, classList: \u0027result-count\u0027 },\\n            ]\\n        },\\n        {\\n            ele: \u0027div\u0027,\\n            classList: \u0027input-container\u0027,\\n            styles: { display: \u0027flex\u0027, \u0027flex-direction\u0027: \u0027column\u0027 },\\n            children: getFormsForUpdatableFields()\\n        },\\n        {\\n            ele: \u0027button\u0027, text: \u0027update\u0027, evnts: {\\n                click: function () {\\n\\n                    let data \u003d { searchQuery: this.parentNode.querySelector(\u0027.bulk-update-searchbar\u0027).value, updates: {} }\\n\\n                    let inputs \u003d this.parentNode.querySelectorAll(\u0027.bulk-update-field\u0027)\\n                    for (let i \u003d 0; i \u003c inputs.length; i++) {\\n                        let input \u003d inputs[i]\\n                        let key \u003d input.xdata\\n                        data.updates[updatableFields[key].getKey()] \u003d updatableFields[key].getData(input)\\n                    }\\n\\n                    console.log(data)\\n                    callWithWaitUI(this.parentNode, (done, u) \u003d\u003e {\\n                        u(\u0027doing bulk update.. this may take some time.\u0027)\\n                        post(\u0027/data/bulkupdate\u0027, data, { \u0027Content-Type\u0027: \u0027application/json\u0027 })\\n                            .then(d \u003d\u003e JSON.parse(d.response))\\n                            .then(d \u003d\u003e {\\n                                console.log(d)\\n                                if (Object.keys(d.failed).length !\u003d 0) {\\n                                    showError(\u0027few updates failed. check console output for details\u0027)\\n                                } else {\\n                                    showSuccess(\u0027all docs updates successfully\u0027)\\n                                }\\n                            })\\n                            .finally(e \u003d\u003e done())\\n                    })\\n                }\\n            }\\n        },\\n        { ele: \u0027div\u0027, classList: \u0027results\u0027 }\\n    ]\\n}, () \u003d\u003e 0, A.makeDiv())\\n\"}","type":"applets","owner":"admin","postTime":1622102782977,"needsApproval":true,"tags":["bulkupdate","inodesapp"],"visibility":["g-security","u-admin"],"savedVisibility":["g-public"]}